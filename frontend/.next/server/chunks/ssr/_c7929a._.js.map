{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/ironman/Documents/experiments/sentiment-analyzer/frontend/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB"}},
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///home/ironman/Documents/experiments/sentiment-analyzer/frontend/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,sMAAM,UAAU,CAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,yDACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,sMAAM,UAAU,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,sMAAM,UAAU,CAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,6CAA6C;QAC1D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,sMAAM,UAAU,CAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,sMAAM,UAAU,CAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,sMAAM,UAAU,CAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///home/ironman/Documents/experiments/sentiment-analyzer/frontend/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,wKACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE"}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///home/ironman/Documents/experiments/sentiment-analyzer/frontend/src/app/page.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\n\nconst SentimentAnalyzer = () => {\n  const [text, setText] = useState('');\n  const [analysis, setAnalysis] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const analyzeSentiment = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:5000/api/analyze-sentiment', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ text }),\n      });\n      \n      const data = await response.json();\n      setAnalysis(data);\n    } catch (error) {\n      console.error('Error analyzing sentiment:', error);\n    }\n    setLoading(false);\n  };\n\n  const getSentimentColor = (category) => {\n    switch (category) {\n      case 'Positive':\n        return 'bg-green-100 text-green-800';\n      case 'Negative':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-4\">\n      <Card className=\"mb-4\">\n        <CardHeader>\n          <CardTitle>Sentiment Analyzer</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <textarea\n            className=\"w-full p-2 border rounded-md mb-4 min-h-[200px]\"\n            value={text}\n            onChange={(e) => setText(e.target.value)}\n            placeholder=\"Enter text to analyze sentiment...\"\n          />\n          <button\n            className=\"bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 disabled:opacity-50\"\n            onClick={analyzeSentiment}\n            disabled={loading || !text}\n          >\n            {loading ? 'Analyzing...' : 'Analyze Sentiment'}\n          </button>\n        </CardContent>\n      </Card>\n\n      {analysis && (\n        <>\n          <Card className=\"mb-4\">\n            <CardHeader>\n              <CardTitle>Overall Analysis</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-4 mb-4\">\n                <Badge className={getSentimentColor(analysis.overall_analysis.category)}>\n                  {analysis.overall_analysis.category}\n                </Badge>\n                <span>Polarity: {analysis.overall_analysis.polarity}</span>\n                <span>Subjectivity: {analysis.overall_analysis.subjectivity}</span>\n              </div>\n\n              <div className=\"h-64 w-full\">\n                <ResponsiveContainer>\n                  <LineChart\n                    data={analysis.sentence_analysis.map((item, index) => ({\n                      name: `Sentence ${index + 1}`,\n                      polarity: item.polarity,\n                      subjectivity: item.subjectivity,\n                    }))}\n                  >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line type=\"monotone\" dataKey=\"polarity\" stroke=\"#3b82f6\" name=\"Polarity\" />\n                    <Line type=\"monotone\" dataKey=\"subjectivity\" stroke=\"#10b981\" name=\"Subjectivity\" />\n                  </LineChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Sentence Analysis</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {analysis.sentence_analysis.map((item, index) => (\n                <div key={index} className=\"mb-4 p-4 border rounded-lg\">\n                  <p className=\"mb-2\">{item.sentence}</p>\n                  <div className=\"flex gap-4\">\n                    <Badge className={getSentimentColor(item.category)}>\n                      {item.category}\n                    </Badge>\n                    <span>Polarity: {item.polarity}</span>\n                    <span>Subjectivity: {item.subjectivity}</span>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default SentimentAnalyzer;\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;AAEA,MAAM,oBAAoB;IACxB,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACjC,MAAM,CAAC,UAAU,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACzC,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEvC,MAAM,mBAAmB;QACvB,WAAW;QACX,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,+CAA+C;gBAC1E,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;oBAAE;gBAAK;YAC9B;YAEA,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,YAAY;QACd,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;QAC9C;QACA,WAAW;IACb;IAEA,MAAM,oBAAoB,CAAC;QACzB,OAAQ;YACN,KAAK;gBACH,OAAO;YACT,KAAK;gBACH,OAAO;YACT;gBACE,OAAO;QACX;IACF;IAEA,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,gIAAA,CAAA,OAAI;gBAAC,WAAU;;kCACd,8OAAC,gIAAA,CAAA,aAAU;kCACT,cAAA,8OAAC,gIAAA,CAAA,YAAS;sCAAC;;;;;;;;;;;kCAEb,8OAAC,gIAAA,CAAA,cAAW;;0CACV,8OAAC;gCACC,WAAU;gCACV,OAAO;gCACP,UAAU,CAAC,IAAM,QAAQ,EAAE,MAAM,CAAC,KAAK;gCACvC,aAAY;;;;;;0CAEd,8OAAC;gCACC,WAAU;gCACV,SAAS;gCACT,UAAU,WAAW,CAAC;0CAErB,UAAU,iBAAiB;;;;;;;;;;;;;;;;;;YAKjC,0BACC;;kCACE,8OAAC,gIAAA,CAAA,OAAI;wBAAC,WAAU;;0CACd,8OAAC,gIAAA,CAAA,aAAU;0CACT,cAAA,8OAAC,gIAAA,CAAA,YAAS;8CAAC;;;;;;;;;;;0CAEb,8OAAC,gIAAA,CAAA,cAAW;;kDACV,8OAAC;wCAAI,WAAU;;0DACb,8OAAC,iIAAA,CAAA,QAAK;gDAAC,WAAW,kBAAkB,SAAS,gBAAgB,CAAC,QAAQ;0DACnE,SAAS,gBAAgB,CAAC,QAAQ;;;;;;0DAErC,8OAAC;;oDAAK;oDAAW,SAAS,gBAAgB,CAAC,QAAQ;;;;;;;0DACnD,8OAAC;;oDAAK;oDAAe,SAAS,gBAAgB,CAAC,YAAY;;;;;;;;;;;;;kDAG7D,8OAAC;wCAAI,WAAU;kDACb,cAAA,8OAAC,mKAAA,CAAA,sBAAmB;sDAClB,cAAA,8OAAC,qJAAA,CAAA,YAAS;gDACR,MAAM,SAAS,iBAAiB,CAAC,GAAG,CAAC,CAAC,MAAM,QAAU,CAAC;wDACrD,MAAM,CAAC,SAAS,EAAE,QAAQ,GAAG;wDAC7B,UAAU,KAAK,QAAQ;wDACvB,cAAc,KAAK,YAAY;oDACjC,CAAC;;kEAED,8OAAC,6JAAA,CAAA,gBAAa;wDAAC,iBAAgB;;;;;;kEAC/B,8OAAC,qJAAA,CAAA,QAAK;wDAAC,SAAQ;;;;;;kEACf,8OAAC,qJAAA,CAAA,QAAK;;;;;kEACN,8OAAC,uJAAA,CAAA,UAAO;;;;;kEACR,8OAAC,oJAAA,CAAA,OAAI;wDAAC,MAAK;wDAAW,SAAQ;wDAAW,QAAO;wDAAU,MAAK;;;;;;kEAC/D,8OAAC,oJAAA,CAAA,OAAI;wDAAC,MAAK;wDAAW,SAAQ;wDAAe,QAAO;wDAAU,MAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAO7E,8OAAC,gIAAA,CAAA,OAAI;;0CACH,8OAAC,gIAAA,CAAA,aAAU;0CACT,cAAA,8OAAC,gIAAA,CAAA,YAAS;8CAAC;;;;;;;;;;;0CAEb,8OAAC,gIAAA,CAAA,cAAW;0CACT,SAAS,iBAAiB,CAAC,GAAG,CAAC,CAAC,MAAM,sBACrC,8OAAC;wCAAgB,WAAU;;0DACzB,8OAAC;gDAAE,WAAU;0DAAQ,KAAK,QAAQ;;;;;;0DAClC,8OAAC;gDAAI,WAAU;;kEACb,8OAAC,iIAAA,CAAA,QAAK;wDAAC,WAAW,kBAAkB,KAAK,QAAQ;kEAC9C,KAAK,QAAQ;;;;;;kEAEhB,8OAAC;;4DAAK;4DAAW,KAAK,QAAQ;;;;;;;kEAC9B,8OAAC;;4DAAK;4DAAe,KAAK,YAAY;;;;;;;;;;;;;;uCAPhC;;;;;;;;;;;;;;;;;;;;;;;;AAiB1B;uCAEe"}},
    {"offset": {"line": 481, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 492, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 492, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}